!!! 5
html
  head
    meta(charset="utf-8")
    meta(name="viewport", content="width=device-width, initial-scale=1, maximum-scale=1")
    title Improving user experience in HTML forms

    //- Check out "src/bower_components/prism/themes/" for available themes
    link(rel="stylesheet", type="text/css", href="bower_components/prism/themes/prism-coy.css")

    link(rel="stylesheet", type="text/css", href="styles/main.css")

  body
    //- header Improving user experience in HTML forms

    article

      section(data-bespoke-hash="title")
        h1 Improving user experience in HTML forms
        a(href="https://joelpurra.com/") joelpurra.com
        a(href="https://joelpurra.com/r/html-forms/") joelpurra.com/r/html-forms/
        aside
          p Allow those who are late to find a seat.
          p This talk is about forms in HTML, and how they can be improved in different ways, using HTML5 attributes and javascript.
          p Many of the tips are for advanced, repeat users, usually administrative or data entry staff within a company.
          p The same techniques may not be applicable on the public web.
          p This is not about 
            a(href="https://developer.mozilla.org/en-US/docs/Accessibility/ARIA") Accessible Rich Internet Applications (ARIA)
            , but some tips could go well together. I'm not an ARIA expert.

      section(data-bespoke-hash="teaser")
        h2 Insert pretty picture to make everyone super interested
        p(style="text-align: center;")
          img(src="resources/images/happycat.jpg", style="max-width: 75%; max-height: 75%;")

      section(data-bespoke-hash="improve-what")
        h2.bullet Improve what?
        .bullet
          h3 Usability
          .columns.two
            .column.left
              ul.no-bullets
                li Reduce confusion
                li Reduce complexity
                li Reduce perceived length
                li Reduce frustration
                li Normalized browser behavior
            .column.right.bullet
              ul.no-bullets
                li &harr; Logical input ordering
                li &harr; Hide fields until needed
                li &harr; Split up form to steps/parts
                li &harr; Early feedback, error messages
                li &harr; Override dependent behavior
        hr
        .bullet
          h3 Input speed
          .columns.two
            .column.left
              ul.no-bullets
                li Autocompletion
                li Automatic formatting
                li Skipping low-frequency fields
                li Shortcut keys
            .column.right.bullet
              ul.no-bullets
                li &harr; Based on already existing data
                li &harr; Based on rules
                li &harr; Based on user consent/usage
                li &harr; Based on usage

      section(data-bespoke-hash="h5validate")
        h2: a(href="https://github.com/joelpurra/h5Validate") h5Validate
        h3 An HTML5 form validation plugin for jQuery.
        p Usability (normalize browser behavior, early feedback, error messages)
        hr
        code.block.language-markup
          pre.
            <input type="text" required="required"
              placeholder="A#A #A#"
              pattern="^([a-zA-Z]\d[a-zA-Z])\s*(\d[a-zA-Z]\d)$"
              title="Required: Canadian H0H 0H0 format."
              data-h5-errorid="invalid-zip" />
            <span id="invalid-zip">*</span>
        hr
        code.block.language-javascript
          pre.
            $("form").h5Validate();
        p Not super active, but my fork is one year old, and only 
          a(href="https://ericleads.com/h5validate/") partially/badly re-integrated upstream
          .
        aside
          p The original author uses the code in production, and didn't approve of my additions. I have them merged in my fork, but I think it might be best to use a different, or several separate libraries.
          p This was a good match for what I was looking for last year, but after having worked with it, I think there are more configurable and dynamic alternatives.

      section(data-bespoke-hash="emulatetab")
        h2: a(href="https://joelpurra.github.io/emulatetab") EmulateTab
        h3 A jQuery plugin to emulate tabbing between elements on a page.
        p Usability (normalize browser behavior)
        hr
        code.block.language-javascript
          pre.
            // From the currently focused element 
            $.emulateTab();

            // Reverse tab from a specific element
            $(selector).emulateTab(-1);
        p For example, go to the next field after selecting a value in a dropdown.
        p This is a developer library/tool.
        aside
          p Emulating tabbing can be done in a few lines of jQuery, but I went all out.
          p Based on the need in two plugins - SkipOnTab and PlusAsTab.

      section(data-bespoke-hash="skipontab")
        h2: a(href="https://joelpurra.github.io/skipontab") SkipOnTab
        h3 A jQuery plugin to exempt selected form fields from the forward tab order.
        p Speed (reduce field tabbing)
        hr
        code.block.language-markup
          pre.
            <input type="text" data-skip-on-tab="true" />

            <ol data-skip-on-tab="true">
              <li><input type="checkbox" /> Checkbox</li>
              <li><input type="checkbox" /> Another checkbox</li>
              ...
        p Not the same as 
          code tabindex="-1"
          , see 
          a(href="https://github.com/joelpurra/skipontab/wiki/SkipOnTab-versus-tabindex") SkipOnTab versus tabindex
          .
        aside
          p Skipping a field in HTML is pretty easy - you just add 
            code tabindex="-1"
            , which was unspecified behavior until HTML5.
          p There are a couple of drawbacks though - one of them being that you can't reach that element
            em at all
            .

      section(data-bespoke-hash="plusastab-1")
        h2: a(href="https://joelpurra.github.io/plusastab") PlusAsTab
        p(style="text-align: center;")
          img(src="resources/images/4895095_f520.jpg", style="max-width: 75%; max-height: 75%;")
        aside
          p It seems most information about computing workstation ergonomics has a picture like this. Have you seen it?
          p Adjust your chair, sit up straight, relax your shoulders and so on.

      section(data-bespoke-hash="plusastab-2")
        h2: a(href="https://joelpurra.github.io/plusastab") PlusAsTab
        p(style="text-align: center;")
          img(src="resources/images/kedudukan-normal-meja.jpg", style="max-width: 75%; max-height: 75%; transform: scale(-1, -1);")
        aside
          p Fewer resources about ergonomics take the top view of a desk with a computer.
          p As you can see, on the left hand side, there's a stack over paper and a phone. On the right hand side there's a couple of book, and I believe a red Swingline stapler.
          p Data input, such as faxed/mailed orders, signed documents, receipts, taxes, almost anything in the government, mixes using paper copies, mouse and keyboard.
          p While not super important for software developers, those who do this all day every work day, can save seconds, minutes, hours, days, weeks - and their wrists, elbows, what have you, by reducing the necessary steps.

      section(data-bespoke-hash="plusastab-3")
        h2: a(href="https://joelpurra.github.io/plusastab") PlusAsTab
        div.bullet(style="height: 350px; background-image: url(resources/images/61O35Ec0UnL._SL1500_.jpg); background-position: center center; background-size: cover;")
          .bullet(style="top: 227px; left: 20px; position: absolute; width: 75px; height: 50px; border-radius: 75px; border: 5px solid red;")
          .bullet(style="top: 227px; left: 567px; position: absolute; width: 50px; height: 75px; border-radius: 75px; border: 5px solid red;")
        aside
          p Here's one example of a simple fix for some input speed improvements.
          p I've used this myself at a job where we, some days, had to do number intensive data input. I was a technical administrator at Stockholm International Fairs, was the title, but apart from knowing all the rules regarding customer orders, we had to input all the six/seven digit codes for things like 5 by 5 meter booth or electricity 10A.
          p Having a "second tab key" on the right hand side can save quite a lot of effort, especially when working with numbers on the numpad. It basically frees up your left hand.

      section(data-bespoke-hash="plusastab")
        h2: a(href="https://joelpurra.github.io/plusastab") PlusAsTab
        h3 A jQuery plugin to use the numpad plus key (configurable) as a tab key equivalent.
        p Speed (physical keyboard distance)
        hr
        code.block.language-javascript
          pre.
            JoelPurra.PlusAsTab.setOptions({
              // Enter, arrow down, numpad plus
              key: [13, 40, 107]
            });

            $(selector).plusAsTab();
        code.block.language-markup
          pre.
            <input type="number" data-plus-as-tab="true" />
        aside
          p Even though data inputters usually are, not everyone is using a full size keyboard these days. You might want to add a few options, depending on your target group.

      section(data-bespoke-hash="followup")
        h2: a(href="https://github.com/joelpurra/followup") Followup
        h3 A jQuery plugin to show and hide follow up questions in a form.
        p Usability (reduce complexity/fewer visible fields), speed (reduce field tabbing)
        hr
        code.block.language-markup.smaller
          pre.
            <p data-has-follow-ups="">
              Ever had a close encounter with a UFO?
              <div>
                <input type="radio" data-has-follow-up="sibling" /> Yes
                <div data-is-follow-up="">
                  Please explain the encounter, especially what kind it was
                  <textarea data-is-follow-up-required="required"></textarea>
                </div>
              </div>
              <input type="radio" /> No
            </p>

      section(data-bespoke-hash="autocleancallback")
        h2: a(href="https://github.com/joelpurra/autocleancallback") AutoCleanCallback
        h3 Automatic HTML input field cleaning onkeyup/onchange using jQuery.
        p Usability (takes care of formatting), speed (reduced efforts)
        hr
        code.block.language-javascript.smaller
          pre.
            var $telephoneInputs = $("[type=tel]");

            $telephoneInputs.each(function() {
                // /^\(?([0-9]{3})\)?[\-. ]?([0-9]{3})[\-. ]?([0-9]{4})$/
                // "($1) $2-$3"
                JoelPurra.autoCleanNorthAmericanPhoneNumber($(this));
            });
        p Works well with copy-pastes, regexp beauty fixes.
        p Easily extensible. Comes with trim, lowercase, uppercase, normalize whitespace, numbers only. Extensions include 
          a(href="https://github.com/joelpurra/autocleancallback-canada") AutoCleanCallback-Canada
          , as I was living and working in Canada while developing this.
        aside
          p Can be used with or without 
            code pattern="/^\(?([0-9]{3})\)?[\-. ]?([0-9]{3})[\-. ]?([0-9]{4})$/"
            |  depending on how strict you want to be.
          p Make sure not to irritate the user by enforcing a format they don't accept. It's best if it follows a known company formatting policy.

      section(data-bespoke-hash="pagehasformchanges")
        h2: a(href="https://github.com/joelpurra/pagehasformchanges") PageHasFormChanges
        h3 A jQuery plugin to check if anything has changed in any form on a page, and warn the user before leaving the page.
        p Usability (reduces frustration)
        hr
        code.block.language-javascript
          pre.
            // Just load the script!
        p Made for pages with only one form, where "any" change means the user should post ("save") the form.

      section(data-bespoke-hash="editdidwhat")
        h2: a(href="https://joelpurra.github.io/editdidwhat") EditDidWhat
        h3 Compare two strings to see what has changed, and perform some string manipulation.
        p Usability (reduced complexity, fewer fields/freetext), speed (autocompletion)
        hr
        code.block.language-javascript.smaller
          pre.
            var change = EditDidWhat.detectChange(previous, current),
             diffIndex = EditDidWhat.findDifferenceIndex(previous, current),
             diffLastIndex = EditDidWhat.findLastDifferenceIndex(previous, current),
             diffLineNumber = EditDidWhat.getLineNumberAt(current, diffIndex),
             diffLinePrevious = EditDidWhat.getLine(previous, diffLineNumber),
             diffLineCurrent = EditDidWhat.getLine(current, diffLineNumber),
             diffLineReplaced = EditDidWhat.replaceLine(current, diffLineNumber, replaceWith);
        p Detects inserts, truncations, replacements, appends, splices.
        p Works best on small changes, for example per keystroke.
        aside
          p Built to autocomplete data in 
            code &lt;textarea&gt;
            |  fields, which can be tricky.
          p Sucessfully implemented textarea address autocompletion, in two different ways.
          ol
            li Full address autocompletion - type a few letters, and a complete address would be autocompleted. The address was based on already existing address data in the database, ordered by number of uses, limited by time.
            li If the address hadn't already matched, postal code locality autocomplete.
            li Street address autocomplete, and verification, was planned, but it required the postal code to be entered first, to be accurate.

      section(data-bespoke-hash="changepolling")
        h2: a(href="https://gist.github.com/joelpurra/2944926") ChangePolling
        h3 A jQuery plugin to check if the value has changed in an input/select/textarea without relying on the jQuery 
          code .change()
          |  event.
        hr
        code.block.language-javascript
          pre.
            $("#my-input-to-poll").changePolling({
              interval: 1000,
              autoStart: true
            });
        p Polling at a configurable interval, which will then trigger the jQuery 
          code .change()
          |  event. Useful when you've got third-party plugins that don't play well with others, when performing changes in forms.
        p This is a developer library/tool. See also 
          a(href="https://joelpurra.github.io/jquery-mutation-summary") jquery-mutation-summary
          .
        aside
          p When programmatically performing changes to form values, the change event isn't triggered. As it isn't triggered automatically, many plugins are failing to notify others of their changes.

      section(data-bespoke-hash="formfieldinfo")
        h2: a(href="https://github.com/joelpurra/formfieldinfo") FormFieldInfo
        h3 A javascript plugin used to collect information about forms in a page.
        hr
        code.block.language-javascript.smaller
          pre.
            var fields = JoelPurra.FormFieldInfo.getFields(selector, $context);
            var fieldGroups = JoelPurra.FormFieldInfo.getFields()
              .removeEmptyNames().mergeArrays().groups().toArray();
        p This is a developer library/tool.
        p Useful when running automated tools to test or extract information - 
          a(href="https://github.com/joelpurra/extract-fields") for example using phantomjs
          , favorably used with 
          a(href="https://gist.github.com/joelpurra/2984763") ObjectComparator
          .
        p The form field information is used to filter out potential form problems, like missing field names, values for radio buttons etcetera.

      section(data-bespoke-hash="mentions")
        h2 Unreleased projects
        p Some examples
        h3 AccessKeys: A tool that automatically displays all keyboard shortcuts available.
        p When holding down the Alt key, shortcuts and their descriptions are displayed - both as a summary and beside the button/link that it activates. Increases usage, user shortcut key suggestions and satisfaction.

      //- section(data-bespoke-hash="", data-bespoke-state="emphatic")
        h2: a(href="") 
        h3 
        p Usability (), speed ()
        hr
        code.block.language-javascript
          pre.
            // script code here

      //- section(data-bespoke-hash="")
        h2 Header
        h3.bullet Powered by <a href=""></a>
        ul
          li Bullet 1
          li Bullet 2
          li Bullet 3

      section(data-bespoke-hash="questions")
        h2 Improving user experience in HTML forms
        h3 Questions?
        ul.no-bullets.two-columns
          li: a(href="https://github.com/joelpurra/h5Validate") h5Validate
          li: a(href="https://joelpurra.github.io/emulatetab") EmulateTab
          li: a(href="https://joelpurra.github.io/skipontab") SkipOnTab
          li: a(href="https://joelpurra.github.io/plusastab") PlusAsTab
          li: a(href="https://github.com/joelpurra/followup") Followup
          li: a(href="https://github.com/joelpurra/autocleancallback") AutoCleanCallback
          li: a(href="https://github.com/joelpurra/autocleancallback-canada") AutoCleanCallback-Canada
          li: a(href="https://github.com/joelpurra/pagehasformchanges") PageHasFormChanges
          li: a(href="https://joelpurra.github.io/editdidwhat") EditDidWhat
          li: a(href="https://gist.github.com/joelpurra/2944926") ChangePolling
          li: a(href="https://github.com/joelpurra/jquery-mutation-summary") jquery-mutation-summary
          li: a(href="https://github.com/joelpurra/formfieldinfo") FormFieldInfo
          li: a(href="https://github.com/joelpurra/extract-fields") extract-fields
          li: a(href="https://gist.github.com/joelpurra/2984763") ObjectComparator

      section(data-bespoke-hash="joelpurra")
        h2 Joel Purra
        h3: a(href="https://joelpurra.com/") joelpurra.com
        p Swedish full stack, generalist, freelance, software engineer.
        p If your company needs reinforcements, let's talk!
        hr
        p You'll find the presentation at 
          a(href="https://joelpurra.com/r/html-forms/") joelpurra.com/r/html-forms
        p Presented at the 
          a(href="https://www.meetup.com/Berlin-HTML5-User-Group/") Berlin HTML5 Meetup Group
          |  in December 2013.
        hr
        p Images: 
          a(href="https://knowyourmeme.com/photos/71862-happy-cat") 1 
          a(href="https://lcbenefield.hubpages.com/hub/Making-Your-Home-Office-Ergonomically-Correct") 2 
          a(href="https://penyakitkomputer.com/amalanterbaikict/elak-sakit-msd-dengan-meja-ergonomi/") 3 
          a(href="https://www.amazon.com/IBM-USB-Keyboard-In-Beige/dp/B001150KDK") 4 
        p Code snippets/examples may be copied freely.
        p The rest of the presentation is licenced under 
          a(href="https://creativecommons.org/licenses/by-sa/3.0/") CC BY-SA 3.0
          .

    footer
      a(href="https://joelpurra.com") joelpurra.com

    script(src="bower_components/bespoke.js/dist/bespoke.min.js")
    script(src="bower_components/bespoke-bullets/dist/bespoke-bullets.min.js")
    script(src="bower_components/bespoke-scale/dist/bespoke-scale.min.js")
    script(src="bower_components/bespoke-hash/dist/bespoke-hash.min.js")
    script(src="bower_components/bespoke-progress/dist/bespoke-progress.min.js")
    script(src="bower_components/bespoke-state/dist/bespoke-state.min.js")
    script(src="bower_components/bespoke-convenient/dist/bespoke-convenient.min.js")
    script(src="bower_components/bespoke-logbook/dist/bespoke-logbook.min.js")
    script(src="bower_components/bespoke-jumpy/dist/bespoke-jumpy.min.js")
    script(src="bower_components/bespoke-indexfinger/dist/bespoke-indexfinger.min.js")
    script(src="bower_components/bespoke-secondary/dist/bespoke-secondary.min.js")
    script(src="bower_components/prefix-free/prefixfree.min.js")
    script(src="bower_components/prism/prism.js")
    script(src="scripts/main.js")

    <!-- DO NOT COPY THIS SCRIPT TAG -->
    <!-- It's used for my statistics -->
    <!-- DO NOT COPY THIS SCRIPT TAG -->
    script(type="text/javascript")
      // DO NOT COPY THIS SCRIPT TAG
      // It's used for my statistics
      // DO NOT COPY THIS SCRIPT TAG
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-29171100-1', 'joelpurra.github.io');
      ga('send', 'pageview');
